{
  "_id" : "babel-plugin-emotion",
  "_rev" : "99-3f487c630815d1a649bee5bc661987be",
  "name" : "babel-plugin-emotion",
  "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
  "dist-tags" : {
    "next" : "11.0.0-next.11",
    "latest" : "10.0.33"
  },
  "versions" : {
    "9.0.0" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "9.0.0",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-9.0.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-9.0.0.tgz",
        "shasum" : "aa8491343fe8685b03b17e00be459c9a84eaf0df"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "7.0.0-beta.32",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^9.0.0",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "@babel/core" : "7.0.0-beta.32",
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@9.0.0",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-9.0.0.tgz_1517720017263_0.9031046344898641"
      },
      "_nodeVersion" : "9.4.0"
    },
    "9.0.1" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "9.0.1",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-9.0.1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-9.0.1.tgz",
        "shasum" : "1c1ec14a5d6f40c64bd68e805f074fea60a580a7"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "7.0.0-beta.32",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^9.0.1",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "@babel/core" : "7.0.0-beta.32",
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@9.0.1",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_9.0.1_1518520227519_0.11571399000995108"
      },
      "_nodeVersion" : "9.4.0"
    },
    "9.2.0" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "9.2.0",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh/",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-9.2.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-9.2.0.tgz",
        "shasum" : "43543dd02c7b5cd89d464aeedef864edb754b852"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "7.0.0-beta.40",
        "@emotion/babel-utils" : "^0.5.3",
        "@emotion/hash" : "^0.6.2",
        "@emotion/memoize" : "^0.6.1",
        "@emotion/stylis" : "^0.6.5",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "find-root" : "^1.1.0",
        "mkdirp" : "^0.5.1",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "@babel/core" : "7.0.0-beta.32",
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@9.2.0",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_9.2.0_1528365700070_0.43953119998764056"
      }
    },
    "10.0.14" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.14",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.14.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.14.tgz",
        "shasum" : "c1d0e4621e303507ea7da57daa3cd771939d6df4"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.2",
        "@emotion/memoize" : "0.7.2",
        "@emotion/serialize" : "^0.11.8",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.9.0",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.14",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.14_1561504095689_0.1865006161893743"
      },
      "_nodeVersion" : "12.4.0"
    },
    "10.0.15" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.15",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.15.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.15.tgz",
        "shasum" : "2ce5bea191331ef65b3b9ae212a8f0e46ff97616"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.2",
        "@emotion/memoize" : "0.7.2",
        "@emotion/serialize" : "^0.11.9",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.9.0",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.15",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.15_1564788610357_0.4736925133709349"
      },
      "_nodeVersion" : "10.16.0"
    },
    "10.0.16" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.16",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.16.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.16.tgz",
        "shasum" : "cb306798058b102a634ca80e69b012caa345bb09"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.2",
        "@emotion/memoize" : "0.7.2",
        "@emotion/serialize" : "^0.11.9",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.9.0",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.16",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.16_1565922024909_0.049379046873341936"
      },
      "_nodeVersion" : "10.16.1"
    },
    "10.0.17" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.17",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.17.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.17.tgz",
        "shasum" : "5673fbed7b1ed61b4b98d5530f33c8a4d1b08484"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.2",
        "@emotion/memoize" : "0.7.2",
        "@emotion/serialize" : "^0.11.10",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.17",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.17_1567295545438_0.4179433246253832"
      },
      "_nodeVersion" : "10.16.1"
    },
    "10.0.19" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.19",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.19.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.19.tgz",
        "shasum" : "67b9b213f7505c015f163a387a005c12c502b1de"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.3",
        "@emotion/memoize" : "0.7.3",
        "@emotion/serialize" : "^0.11.11",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "emotion-release-bot",
        "email" : "mitchell+emotion-release-bot@hamil.town"
      },
      "_id" : "babel-plugin-emotion@10.0.19",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.19_1568724678351_0.5806895676000159"
      },
      "_nodeVersion" : "10.16.3"
    },
    "9.2.11" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "9.2.11",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-9.2.11.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-9.2.11.tgz",
        "shasum" : "319c005a9ee1d15bb447f59fe504c35fd5807728"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/babel-utils" : "^0.6.4",
        "@emotion/hash" : "^0.6.2",
        "@emotion/memoize" : "^0.6.1",
        "@emotion/stylis" : "^0.7.0",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "find-root" : "^1.1.0",
        "mkdirp" : "^0.5.1",
        "source-map" : "^0.5.7",
        "touch" : "^2.0.1"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_from" : "file:babel-plugin-emotion-9.2.11.tgz",
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@9.2.11",
      "gitHead" : "206e5f642b13153a7fc85360c3eb7c302d7bda84",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_9.2.11_1538343910370_0.6707437397001736"
      },
      "_resolved" : "",
      "_integrity" : "",
      "_nodeVersion" : "10.11.0"
    },
    "9.2.10" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "9.2.10",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-9.2.10.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-9.2.10.tgz",
        "shasum" : "983c288106cece7ce761df0513683ef0d241c466"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/babel-utils" : "^0.6.4",
        "@emotion/hash" : "^0.6.2",
        "@emotion/memoize" : "^0.6.1",
        "@emotion/stylis" : "^0.7.0",
        "babel-core" : "^6.26.3",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "find-root" : "^1.1.0",
        "mkdirp" : "^0.5.1",
        "source-map" : "^0.5.7",
        "touch" : "^2.0.1"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@9.2.10",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_9.2.10_1537389909001_0.2484884225454782"
      },
      "_nodeVersion" : "10.10.0"
    },
    "8.0.2" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "8.0.2",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.2.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.2.tgz",
        "shasum" : "0d674bd480c69e6b2d3affccfb654d6f97c6bf04"
      },
      "dependencies" : {
        "babel-generator" : "^6.26.0",
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^8.0.2-7",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.5.0",
      "_npmUser" : {
        "name" : "tkh44",
        "email" : "kye.hohenberger@gmail.com"
      },
      "_id" : "babel-plugin-emotion@8.0.2",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.2.tgz_1507224899226_0.9365113272797316"
      },
      "_nodeVersion" : "8.1.2"
    },
    "8.0.3" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "8.0.3",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.3.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.3.tgz",
        "shasum" : "c80ec839920e8a8b5d43824266c416129d0a31a4"
      },
      "dependencies" : {
        "babel-generator" : "^6.26.0",
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^8.0.2-7",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.0.3",
      "_npmUser" : {
        "name" : "tkh44",
        "email" : "kye.hohenberger@gmail.com"
      },
      "_id" : "babel-plugin-emotion@8.0.3",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.3.tgz_1507328626039_0.6074289293028414"
      },
      "_nodeVersion" : "8.1.2"
    },
    "10.0.13" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.13",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.13.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.13.tgz",
        "shasum" : "c4faa1ba8c0fd74a13226ced32876b314ef1d8ab"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.1",
        "@emotion/memoize" : "0.7.1",
        "@emotion/serialize" : "^0.11.6",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.13",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.13_1560071771200_0.3990972631904808"
      },
      "_nodeVersion" : "10.15.3"
    },
    "10.0.0-beta.9" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0-beta.9",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0-beta.9.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0-beta.9.tgz",
        "shasum" : "66bafbf177f3a6a2ceb889c72a91912aaf5a36bf"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "^0.7.0",
        "@emotion/memoize" : "^0.7.0",
        "@emotion/serialize" : "^0.10.4",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "tag" : "next"
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0-beta.9",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0-beta.9_1541998786643_0.7090758142732434"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        // sourceMap is on by default but source maps are dead code eliminated in production\n        \"sourceMap\": true,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\n**.babelrc**\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `true`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n> Note:\n>\n> Source maps are on by default in babel-plugin-emotion but they will be removed in production builds\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config (which is included in Create React App 2.0) and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css/macro'\nimport styled from '@emotion/styled/macro'\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "11.1.0"
    },
    "10.0.0-beta.8" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0-beta.8",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0-beta.8.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0-beta.8.tgz",
        "shasum" : "33a3be8c54e3f7cfcbccebafd50bd372a6600857"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "^0.7.0",
        "@emotion/memoize" : "^0.7.0",
        "@emotion/serialize" : "^0.10.3",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "tag" : "next"
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0-beta.8",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0-beta.8_1541393194285_0.4089950538121092"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        // sourceMap is on by default but source maps are dead code eliminated in production\n        \"sourceMap\": true,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\n**.babelrc**\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `true`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n> Note:\n>\n> Source maps are on by default in babel-plugin-emotion but they will be removed in production builds\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config (which is included in Create React App 2.0) and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css/macro'\nimport styled from '@emotion/styled/macro'\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "11.0.0"
    },
    "7.3.2" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "7.3.2",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-7.3.2.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-7.3.2.tgz",
        "shasum" : "2d07d990281ac680ef981326debbe115a67d436a"
      },
      "dependencies" : {
        "autoprefixer" : "^7.1.2",
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "emotion-utils" : "^7.3.1",
        "postcss" : "^6.0.9",
        "postcss-js" : "^1.0.0",
        "postcss-nested" : "^2.1.1",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.0.4",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@7.3.2",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-7.3.2.tgz_1505392224932_0.9554246983025223"
      },
      "_nodeVersion" : "7.10.0"
    },
    "10.0.0-beta.5" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0-beta.5",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0-beta.5.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0-beta.5.tgz",
        "shasum" : "91df310a50e866be6536cef83b2dda5a43d00337"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "^0.7.0",
        "@emotion/memoize" : "^0.7.0",
        "@emotion/serialize" : "^0.10.0",
        "@emotion/stylis" : "^0.8.0",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "tag" : "next"
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0-beta.5",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0-beta.5_1539761666132_0.1912929906581875"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        \"sourceMap\": false,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\nUse [Babel's `env` property](https://babeljs.io/docs/usage/babelrc/#env-option)\n\n**.babelrc**\n\n```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [[\"emotion\", { \"hoist\": true }]]\n    },\n    \"development\": {\n      \"plugins\": [[\"emotion\", { \"sourceMap\": true, \"autoLabel\": true }]]\n    }\n  }\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `false`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css.macro'\nimport styled from '@emotion/styled.macro'\n```\n\n[create-react-app issue discussing macros](https://github.com/facebookincubator/create-react-app/issues/2730).\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.11.0"
    },
    "10.0.0-beta.4" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0-beta.4",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0-beta.4.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0-beta.4.tgz",
        "shasum" : "66520edab26896e4b834f549150860297261f082"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "^0.7.0",
        "@emotion/memoize" : "^0.7.0",
        "@emotion/serialize" : "^0.10.0",
        "@emotion/stylis" : "^0.8.0",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "tag" : "next"
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0-beta.4",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0-beta.4_1539761122513_0.735479983072403"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        \"sourceMap\": false,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\nUse [Babel's `env` property](https://babeljs.io/docs/usage/babelrc/#env-option)\n\n**.babelrc**\n\n```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [[\"emotion\", { \"hoist\": true }]]\n    },\n    \"development\": {\n      \"plugins\": [[\"emotion\", { \"sourceMap\": true, \"autoLabel\": true }]]\n    }\n  }\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `false`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css.macro'\nimport styled from '@emotion/styled.macro'\n```\n\n[create-react-app issue discussing macros](https://github.com/facebookincubator/create-react-app/issues/2730).\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.11.0"
    },
    "10.0.0-beta.7" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0-beta.7",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0-beta.7.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0-beta.7.tgz",
        "shasum" : "04bca6f1c7e20f11b51440d4586338f86baeb90e"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "^0.7.0",
        "@emotion/memoize" : "^0.7.0",
        "@emotion/serialize" : "^0.10.2",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "tag" : "next"
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0-beta.7",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0-beta.7_1541143837094_0.9569392468185094"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        // sourceMap is on by default but source maps are dead code eliminated in production\n        \"sourceMap\": true,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\n**.babelrc**\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `true`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n> Note:\n>\n> Source maps are on by default in babel-plugin-emotion but they will be removed in production builds\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config (which is included in Create React App 2.0) and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css/macro'\nimport styled from '@emotion/styled/macro'\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "11.0.0"
    },
    "10.0.0-beta.6" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0-beta.6",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0-beta.6.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0-beta.6.tgz",
        "shasum" : "e7ade4ce677e3c4e72cc1886ab840e7bceed3409"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "^0.7.0",
        "@emotion/memoize" : "^0.7.0",
        "@emotion/serialize" : "^0.10.1",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "tag" : "next"
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0-beta.6",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0-beta.6_1540617666813_0.9277394662346952"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        // sourceMap is on by default but source maps are dead code eliminated in production\n        \"sourceMap\": true,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\n**.babelrc**\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `true`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n> Note:\n>\n> Source maps are on by default in babel-plugin-emotion but they will be removed in production builds\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config (which is included in Create React App 2.0) and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css/macro'\nimport styled from '@emotion/styled/macro'\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.11.0"
    },
    "10.0.0-beta.1" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0-beta.1",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0-beta.1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0-beta.1.tgz",
        "shasum" : "873d909bb43a307ca5dfc258ef9b28172adf055c"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "^0.7.0",
        "@emotion/memoize" : "^0.7.0",
        "@emotion/serialize" : "^0.10.0",
        "@emotion/stylis" : "^0.8.0",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "tag" : "next"
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0-beta.1",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0-beta.1_1539599217499_0.6991934302043563"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        \"sourceMap\": false,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\nUse [Babel's `env` property](https://babeljs.io/docs/usage/babelrc/#env-option)\n\n**.babelrc**\n\n```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [[\"emotion\", { \"hoist\": true }]]\n    },\n    \"development\": {\n      \"plugins\": [[\"emotion\", { \"sourceMap\": true, \"autoLabel\": true }]]\n    }\n  }\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `false`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css.macro'\nimport styled from '@emotion/styled.macro'\n```\n\n[create-react-app issue discussing macros](https://github.com/facebookincubator/create-react-app/issues/2730).\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.11.0"
    },
    "10.0.0-beta.0" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0-beta.0",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0-beta.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0-beta.0.tgz",
        "shasum" : "0664aeb1fe0fb718691b61db3e364e25cff6ae2b"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "^0.7.0",
        "@emotion/memoize" : "^0.7.0",
        "@emotion/serialize" : "^0.10.0",
        "@emotion/stylis" : "^0.8.0",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "tag" : "next"
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0-beta.0",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0-beta.0_1539416116666_0.9070357121585699"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        \"sourceMap\": false,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\nUse [Babel's `env` property](https://babeljs.io/docs/usage/babelrc/#env-option)\n\n**.babelrc**\n\n```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [[\"emotion\", { \"hoist\": true }]]\n    },\n    \"development\": {\n      \"plugins\": [[\"emotion\", { \"sourceMap\": true, \"autoLabel\": true }]]\n    }\n  }\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `false`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css.macro'\nimport styled from '@emotion/styled.macro'\n```\n\n[create-react-app issue discussing macros](https://github.com/facebookincubator/create-react-app/issues/2730).\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.11.0"
    },
    "10.0.0-beta.3" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0-beta.3",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0-beta.3.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0-beta.3.tgz",
        "shasum" : "febad88c5890d1c49ee3309ac8350b586741ab72"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "^0.7.0",
        "@emotion/memoize" : "^0.7.0",
        "@emotion/serialize" : "^0.10.0",
        "@emotion/stylis" : "^0.8.0",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "tag" : "next"
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0-beta.3",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0-beta.3_1539734306344_0.05319306791056011"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        \"sourceMap\": false,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\nUse [Babel's `env` property](https://babeljs.io/docs/usage/babelrc/#env-option)\n\n**.babelrc**\n\n```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [[\"emotion\", { \"hoist\": true }]]\n    },\n    \"development\": {\n      \"plugins\": [[\"emotion\", { \"sourceMap\": true, \"autoLabel\": true }]]\n    }\n  }\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `false`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css.macro'\nimport styled from '@emotion/styled.macro'\n```\n\n[create-react-app issue discussing macros](https://github.com/facebookincubator/create-react-app/issues/2730).\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.11.0"
    },
    "7.2.2" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "7.2.2",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-7.2.2.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-7.2.2.tgz",
        "shasum" : "eae520ef15e4affd87aab761e1c8b48b3385af3e"
      },
      "dependencies" : {
        "autoprefixer" : "^7.1.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "emotion-utils" : "^7.2.2",
        "postcss" : "^6.0.9",
        "postcss-js" : "^1.0.0",
        "postcss-nested" : "^2.1.1",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "tkh44",
        "email" : "kye.hohenberger@gmail.com"
      },
      "_id" : "babel-plugin-emotion@7.2.2",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-7.2.2.tgz_1504630036213_0.3342996318824589"
      },
      "_nodeVersion" : "8.4.0"
    },
    "10.0.0-beta.2" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0-beta.2",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0-beta.2.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0-beta.2.tgz",
        "shasum" : "8b66b3673980c524c9998f6cae556f579c660357"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "^0.7.0",
        "@emotion/memoize" : "^0.7.0",
        "@emotion/serialize" : "^0.10.0",
        "@emotion/stylis" : "^0.8.0",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "tag" : "next"
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0-beta.2",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0-beta.2_1539678829811_0.6464022091261137"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        \"sourceMap\": false,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\nUse [Babel's `env` property](https://babeljs.io/docs/usage/babelrc/#env-option)\n\n**.babelrc**\n\n```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [[\"emotion\", { \"hoist\": true }]]\n    },\n    \"development\": {\n      \"plugins\": [[\"emotion\", { \"sourceMap\": true, \"autoLabel\": true }]]\n    }\n  }\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `false`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css.macro'\nimport styled from '@emotion/styled.macro'\n```\n\n[create-react-app issue discussing macros](https://github.com/facebookincubator/create-react-app/issues/2730).\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.11.0"
    },
    "8.0.2-10" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "8.0.2-10",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.2-10.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.2-10.tgz",
        "shasum" : "857ddda66e9f24f84dd7901e5f42e894d44f62e0"
      },
      "dependencies" : {
        "babel-generator" : "^6.26.0",
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^8.0.2-7",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "tkh44",
        "email" : "kye.hohenberger@gmail.com"
      },
      "_id" : "babel-plugin-emotion@8.0.2-10",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.2-10.tgz_1506710512618_0.4185130207333714"
      },
      "_nodeVersion" : "8.1.2"
    },
    "8.0.2-11" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "8.0.2-11",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.2-11.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.2-11.tgz",
        "shasum" : "aa8821bbc6f4eefdea00bd9c76810676ec60f4cc"
      },
      "dependencies" : {
        "babel-generator" : "^6.26.0",
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^8.0.2-7",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.4.2",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@8.0.2-11",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.2-11.tgz_1506748341940_0.8598353720735759"
      },
      "_nodeVersion" : "7.10.0"
    },
    "11.0.0-next.4" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "11.0.0-next.4",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-11.0.0-next.4.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-11.0.0-next.4.tgz",
        "shasum" : "f755740e8ae80b1e6abaa46131ce0d4b5aec5402"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.7.0",
        "@babel/plugin-syntax-jsx" : "^7.2.0",
        "@babel/runtime" : "^7.7.2",
        "@emotion/hash" : "0.7.3",
        "@emotion/memoize" : "0.7.3",
        "@emotion/serialize" : "^0.11.15-next.1",
        "babel-plugin-macros" : "^2.0.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "@babel/core" : "^7.7.2",
        "babel-check-duplicated-nodes" : "^1.0.0"
      },
      "peerDependencies" : {
        "@babel/core" : "^7.0.0"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell+emotion-release-bot@hamil.town",
        "name" : "emotion-release-bot"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test:typescript" : "exit 0"
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "emotion-release-bot",
        "email" : "mitchell+emotion-release-bot@hamil.town"
      },
      "_id" : "babel-plugin-emotion@11.0.0-next.4",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_11.0.0-next.4_1573641775153_0.6331123834487158"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        // sourceMap is on by default but source maps are dead code eliminated in production\n        \"sourceMap\": true,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\n**.babelrc**\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `true`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n> Note:\n>\n> Source maps are on by default in babel-plugin-emotion but they will be removed in production builds\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n- `[dirname]` - name of the directory containing the file where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n### `importMap`\n\nThis option allows you to tell babel-plugin-emotion what imports it should look at to determine what it should transform so if you re-export Emotion's exports, you can still use the Babel transforms\n\nAn example config:\n\n```json\n{\n  \"my-package\": {\n    \"anotherExport\": {\n      \"canonicalImport\": [\"@emotion/styled\", \"default\"],\n      \"styledBaseImport\": [\"my-package/base\", \"anotherExport\"]\n    }\n  },\n  \"some-package\": {\n    \"someExport\": {\n      \"canonicalImport\": [\"@emotion/core\", \"css\"]\n    },\n    \"thisIsTheJsxExport\": {\n      \"canonicalImport\": [\"@emotion/core\", \"jsx\"]\n    }\n  }\n}\n```\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config (which is included in Create React App 2.0) and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css/macro'\nimport styled from '@emotion/styled/macro'\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.17.0"
    },
    "11.0.0-next.3" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "11.0.0-next.3",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-11.0.0-next.3.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-11.0.0-next.3.tgz",
        "shasum" : "de30f460a15fc2b293d3fdd4a207c37bc617d9e3"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.7.0",
        "@babel/runtime" : "^7.7.2",
        "@emotion/hash" : "0.7.3",
        "@emotion/memoize" : "0.7.3",
        "@emotion/serialize" : "^0.11.15-next.1",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell+emotion-release-bot@hamil.town",
        "name" : "emotion-release-bot"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test:typescript" : "exit 0"
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "emotion-release-bot",
        "email" : "mitchell+emotion-release-bot@hamil.town"
      },
      "_id" : "babel-plugin-emotion@11.0.0-next.3",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_11.0.0-next.3_1573294839826_0.014412315905720119"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        // sourceMap is on by default but source maps are dead code eliminated in production\n        \"sourceMap\": true,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\n**.babelrc**\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `true`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n> Note:\n>\n> Source maps are on by default in babel-plugin-emotion but they will be removed in production builds\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n- `[dirname]` - name of the directory containing the file where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n### `importMap`\n\nThis option allows you to tell babel-plugin-emotion what imports it should look at to determine what it should transform so if you re-export Emotion's exports, you can still use the Babel transforms\n\nAn example config:\n\n```json\n{\n  \"my-package\": {\n    \"anotherExport\": {\n      \"canonicalImport\": [\"@emotion/styled\", \"default\"],\n      \"styledBaseImport\": [\"my-package/base\", \"anotherExport\"]\n    }\n  },\n  \"some-package\": {\n    \"someExport\": {\n      \"canonicalImport\": [\"@emotion/core\", \"css\"]\n    },\n    \"thisIsTheJsxExport\": {\n      \"canonicalImport\": [\"@emotion/core\", \"jsx\"]\n    }\n  }\n}\n```\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config (which is included in Create React App 2.0) and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css/macro'\nimport styled from '@emotion/styled/macro'\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.17.0"
    },
    "10.0.27" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.27",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.27.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.27.tgz",
        "shasum" : "59001cf5de847c1d61f2079cd906a90a00d3184f"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.4",
        "@emotion/memoize" : "0.7.4",
        "@emotion/serialize" : "^0.11.15",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell+emotion-release-bot@hamil.town",
        "name" : "emotion-release-bot"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "emotion-release-bot",
        "email" : "mitchell+emotion-release-bot@hamil.town"
      },
      "_id" : "babel-plugin-emotion@10.0.27",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.27_1577056277855_0.9318630174492732"
      },
      "_nodeVersion" : "10.18.0"
    },
    "10.0.28" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.28",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.28.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.28.tgz",
        "shasum" : "731133577795ea04e5b1d11aff247fa0ad3fd364"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.4",
        "@emotion/memoize" : "0.7.4",
        "@emotion/serialize" : "^0.11.15",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell+emotion-release-bot@hamil.town",
        "name" : "emotion-release-bot"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "emotion-release-bot",
        "email" : "mitchell+emotion-release-bot@hamil.town"
      },
      "_id" : "babel-plugin-emotion@10.0.28",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.28_1582825549201_0.10089240219198592"
      },
      "_nodeVersion" : "10.19.0"
    },
    "10.0.29" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.29",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.29.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.29.tgz",
        "shasum" : "89d8e497091fcd3d10331f097f1471e4cc3f35b4"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.8.0",
        "@emotion/memoize" : "0.7.4",
        "@emotion/serialize" : "^0.11.16",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell+emotion-release-bot@hamil.town",
        "name" : "emotion-release-bot"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "emotion-release-bot",
        "email" : "mitchell+emotion-release-bot@hamil.town"
      },
      "_id" : "babel-plugin-emotion@10.0.29",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.29_1583144154755_0.740539762982096"
      },
      "_nodeVersion" : "10.19.0"
    },
    "11.0.0-next.8" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "11.0.0-next.8",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-11.0.0-next.8.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-11.0.0-next.8.tgz",
        "shasum" : "098e99d9e4b2d9e4a6b88a754531d7eff807b54c"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.7.0",
        "@babel/plugin-syntax-jsx" : "^7.2.0",
        "@babel/runtime" : "^7.7.2",
        "@emotion/hash" : "0.7.3",
        "@emotion/memoize" : "0.7.3",
        "@emotion/serialize" : "^0.12.0-next.3",
        "babel-plugin-macros" : "^2.6.1",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "@babel/core" : "^7.7.2",
        "babel-check-duplicated-nodes" : "^1.0.0"
      },
      "peerDependencies" : {
        "@babel/core" : "^7.0.0"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell+emotion-release-bot@hamil.town",
        "name" : "emotion-release-bot"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test:typescript" : "exit 0"
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "emotion-release-bot",
        "email" : "mitchell+emotion-release-bot@hamil.town"
      },
      "_id" : "babel-plugin-emotion@11.0.0-next.8",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_11.0.0-next.8_1575753368433_0.18403752029164"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        // sourceMap is on by default but source maps are dead code eliminated in production\n        \"sourceMap\": true,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\n**.babelrc**\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `true`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n> Note:\n>\n> Source maps are on by default in babel-plugin-emotion but they will be removed in production builds\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n- `[dirname]` - name of the directory containing the file where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n### `importMap`\n\nThis option allows you to tell babel-plugin-emotion what imports it should look at to determine what it should transform so if you re-export Emotion's exports, you can still use the Babel transforms\n\nAn example config:\n\n```json\n{\n  \"my-package\": {\n    \"anotherExport\": {\n      \"canonicalImport\": [\"@emotion/styled\", \"default\"],\n      \"styledBaseImport\": [\"my-package/base\", \"anotherExport\"]\n    }\n  },\n  \"some-package\": {\n    \"someExport\": {\n      \"canonicalImport\": [\"@emotion/core\", \"css\"]\n    },\n    \"thisIsTheJsxExport\": {\n      \"canonicalImport\": [\"@emotion/core\", \"jsx\"]\n    }\n  }\n}\n```\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config (which is included in Create React App 2.0) and use the imports/packages shown below.\n\n```jsx\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport { jsx, css, Global, keyframes } from '@emotion/core/macro'\nimport styled from '@emotion/styled/macro'\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.17.0"
    },
    "11.0.0-next.6" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "11.0.0-next.6",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-11.0.0-next.6.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-11.0.0-next.6.tgz",
        "shasum" : "77a6e612163f5e116ace933edbc8ff34bd1b628c"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.7.0",
        "@babel/plugin-syntax-jsx" : "^7.2.0",
        "@babel/runtime" : "^7.7.2",
        "@emotion/hash" : "0.7.3",
        "@emotion/memoize" : "0.7.3",
        "@emotion/serialize" : "^0.11.15-next.1",
        "babel-plugin-macros" : "^2.6.1",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "@babel/core" : "^7.7.2",
        "babel-check-duplicated-nodes" : "^1.0.0"
      },
      "peerDependencies" : {
        "@babel/core" : "^7.0.0"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell+emotion-release-bot@hamil.town",
        "name" : "emotion-release-bot"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test:typescript" : "exit 0"
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "emotion-release-bot",
        "email" : "mitchell+emotion-release-bot@hamil.town"
      },
      "_id" : "babel-plugin-emotion@11.0.0-next.6",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_11.0.0-next.6_1574721870672_0.15769166117771105"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        // sourceMap is on by default but source maps are dead code eliminated in production\n        \"sourceMap\": true,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\n**.babelrc**\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `true`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n> Note:\n>\n> Source maps are on by default in babel-plugin-emotion but they will be removed in production builds\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n- `[dirname]` - name of the directory containing the file where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n### `importMap`\n\nThis option allows you to tell babel-plugin-emotion what imports it should look at to determine what it should transform so if you re-export Emotion's exports, you can still use the Babel transforms\n\nAn example config:\n\n```json\n{\n  \"my-package\": {\n    \"anotherExport\": {\n      \"canonicalImport\": [\"@emotion/styled\", \"default\"],\n      \"styledBaseImport\": [\"my-package/base\", \"anotherExport\"]\n    }\n  },\n  \"some-package\": {\n    \"someExport\": {\n      \"canonicalImport\": [\"@emotion/core\", \"css\"]\n    },\n    \"thisIsTheJsxExport\": {\n      \"canonicalImport\": [\"@emotion/core\", \"jsx\"]\n    }\n  }\n}\n```\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config (which is included in Create React App 2.0) and use the imports/packages shown below.\n\n```jsx\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport { jsx, css, Global, keyframes } from '@emotion/core/macro'\nimport styled from '@emotion/styled/macro'\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.17.0"
    },
    "10.0.20" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.20",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.20.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.20.tgz",
        "shasum" : "635766d390b7923bb0c01bfbb87529e0ff35478b"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.3",
        "@emotion/memoize" : "0.7.3",
        "@emotion/serialize" : "^0.11.11",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell+emotion-release-bot@hamil.town",
        "name" : "emotion-release-bot"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "emotion-release-bot",
        "email" : "mitchell+emotion-release-bot@hamil.town"
      },
      "_id" : "babel-plugin-emotion@10.0.20",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.20_1570056965350_0.22107384317272927"
      },
      "_nodeVersion" : "10.16.3"
    },
    "10.0.21" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.21",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.21.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.21.tgz",
        "shasum" : "9ebeb12edeea3e60a5476b0e07c9868605e65968"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.3",
        "@emotion/memoize" : "0.7.3",
        "@emotion/serialize" : "^0.11.11",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell+emotion-release-bot@hamil.town",
        "name" : "emotion-release-bot"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "emotion-release-bot",
        "email" : "mitchell+emotion-release-bot@hamil.town"
      },
      "_id" : "babel-plugin-emotion@10.0.21",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.21_1570314890177_0.41508407689155535"
      },
      "_nodeVersion" : "10.16.3"
    },
    "8.0.1-0" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "8.0.1-0",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.1-0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.1-0.tgz",
        "shasum" : "3075830517b126ec86a4b5015d0961cdb2f2ed34"
      },
      "dependencies" : {
        "autoprefixer" : "^7.1.2",
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "emotion-utils" : "^8.0.1-0",
        "postcss" : "^6.0.9",
        "postcss-js" : "^1.0.0",
        "postcss-nested" : "^2.1.1",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.0.3",
      "_npmUser" : {
        "name" : "tkh44",
        "email" : "kye.hohenberger@gmail.com"
      },
      "_id" : "babel-plugin-emotion@8.0.1-0",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.1-0.tgz_1505946707136_0.4621044236700982"
      },
      "_nodeVersion" : "8.1.2"
    },
    "10.0.22" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.22",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.22.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.22.tgz",
        "shasum" : "7860b39f96dcc1b79e326987ce29d4fcfff96f52"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.3",
        "@emotion/memoize" : "0.7.3",
        "@emotion/serialize" : "^0.11.12",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell+emotion-release-bot@hamil.town",
        "name" : "emotion-release-bot"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "emotion-release-bot",
        "email" : "mitchell+emotion-release-bot@hamil.town"
      },
      "_id" : "babel-plugin-emotion@10.0.22",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.22_1571833360592_0.2582477926619895"
      },
      "_nodeVersion" : "10.17.0"
    },
    "10.0.23" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.23",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.23.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.23.tgz",
        "shasum" : "040d40bf61dcab6d31dd6043d10e180240b8515b"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.3",
        "@emotion/memoize" : "0.7.3",
        "@emotion/serialize" : "^0.11.14",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell+emotion-release-bot@hamil.town",
        "name" : "emotion-release-bot"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "emotion-release-bot",
        "email" : "mitchell+emotion-release-bot@hamil.town"
      },
      "_id" : "babel-plugin-emotion@10.0.23",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.23_1572349514598_0.8945791944793491"
      },
      "_nodeVersion" : "10.17.0"
    },
    "9.1.2" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "9.1.2",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-9.1.2.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-9.1.2.tgz",
        "shasum" : "e26b313fa0fecd0f2cc07b1e4ef05da167e4f740"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "7.0.0-beta.32",
        "@emotion/hash" : "^0.6.2",
        "@emotion/memoize" : "^0.6.1",
        "@emotion/stylis" : "^0.6.5",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "find-root" : "^1.1.0",
        "mkdirp" : "^0.5.1",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "@babel/core" : "7.0.0-beta.32",
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@9.1.2",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_9.1.2_1523951131829_0.8992716597075969"
      },
      "_nodeVersion" : "9.6.1"
    },
    "8.0.11" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "8.0.11",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.11.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.11.tgz",
        "shasum" : "cec7f77e6c596a67a1973f0336f78571f8d18bb7"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "7.0.0-beta.31",
        "babel-macros" : "^1.2.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^8.0.11",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "@babel/core" : "7.0.0-beta.31",
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@8.0.11",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.11.tgz_1511520314614_0.9938905970193446"
      },
      "_nodeVersion" : "8.9.1"
    },
    "8.0.12" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "8.0.12",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.12.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.12.tgz",
        "shasum" : "2ed844001416b0ae2ff787a06b1804ec5f531c89"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "7.0.0-beta.32",
        "babel-macros" : "^1.2.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^8.0.12",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "@babel/core" : "7.0.0-beta.32",
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@8.0.12",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.12.tgz_1512084599853_0.2251946514006704"
      },
      "_nodeVersion" : "8.9.1"
    },
    "8.0.10" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "8.0.10",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.10.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.10.tgz",
        "shasum" : "9247856d60718f3a741a8487ef907d95a4f5b8a7"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "7.0.0-beta.31",
        "babel-macros" : "^1.2.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^8.0.10",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "@babel/core" : "7.0.0-beta.31",
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "tkh44",
        "email" : "kye.hohenberger@gmail.com"
      },
      "_id" : "babel-plugin-emotion@8.0.10",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.10.tgz_1510090248487_0.4808969874866307"
      },
      "_nodeVersion" : "8.4.0"
    },
    "9.1.0" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "9.1.0",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-9.1.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-9.1.0.tgz",
        "shasum" : "d0b7598168980f4fbc7b72fd86c49904b613fe79"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "7.0.0-beta.32",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^9.1.0",
        "find-root" : "^1.1.0",
        "mkdirp" : "^0.5.1",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "@babel/core" : "7.0.0-beta.32",
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@9.1.0",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_9.1.0_1521839002058_0.7619255456576988"
      },
      "_nodeVersion" : "9.6.1"
    },
    "8.0.0-0" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "8.0.0-0",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.0-0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.0-0.tgz",
        "shasum" : "10cd2920c5feab79cfa3c231f9e69c82d3cf5546"
      },
      "dependencies" : {
        "autoprefixer" : "^7.1.2",
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "emotion-utils" : "^8.0.0-0",
        "postcss" : "^6.0.9",
        "postcss-js" : "^1.0.0",
        "postcss-nested" : "^2.1.1",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.0.4",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@8.0.0-0",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.0-0.tgz_1505875054226_0.7672233285848051"
      },
      "_nodeVersion" : "7.10.0"
    },
    "10.0.0-beta.10" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0-beta.10",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0-beta.10.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0-beta.10.tgz",
        "shasum" : "aac1a59dc7cdd4b723e6e1a34578a1a7e11627be"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "^0.7.0",
        "@emotion/memoize" : "^0.7.0",
        "@emotion/serialize" : "^0.10.5",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "tag" : "next"
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0-beta.10",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0-beta.10_1541999821405_0.8670153828468046"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        // sourceMap is on by default but source maps are dead code eliminated in production\n        \"sourceMap\": true,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\n**.babelrc**\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `true`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n> Note:\n>\n> Source maps are on by default in babel-plugin-emotion but they will be removed in production builds\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config (which is included in Create React App 2.0) and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css/macro'\nimport styled from '@emotion/styled/macro'\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "11.1.0"
    },
    "10.0.0-beta.12" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0-beta.12",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0-beta.12.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0-beta.12.tgz",
        "shasum" : "2fb70430f8fabacaa45347d249ba416020436540"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "^0.7.0",
        "@emotion/memoize" : "^0.7.0",
        "@emotion/serialize" : "0.10.6",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "tag" : "next"
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0-beta.12",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0-beta.12_1542085920124_0.4299623128408565"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        // sourceMap is on by default but source maps are dead code eliminated in production\n        \"sourceMap\": true,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\n**.babelrc**\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `true`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n> Note:\n>\n> Source maps are on by default in babel-plugin-emotion but they will be removed in production builds\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config (which is included in Create React App 2.0) and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css/macro'\nimport styled from '@emotion/styled/macro'\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "11.1.0"
    },
    "10.0.0-beta.11" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0-beta.11",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0-beta.11.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0-beta.11.tgz",
        "shasum" : "71b379993b56a88911495dc975a4106e71fbfad0"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "^0.7.0",
        "@emotion/memoize" : "^0.7.0",
        "@emotion/serialize" : "^0.10.5",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "tag" : "next"
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0-beta.11",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0-beta.11_1542007413687_0.7783469607200117"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        // sourceMap is on by default but source maps are dead code eliminated in production\n        \"sourceMap\": true,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\n**.babelrc**\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `true`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n> Note:\n>\n> Source maps are on by default in babel-plugin-emotion but they will be removed in production builds\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config (which is included in Create React App 2.0) and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css/macro'\nimport styled from '@emotion/styled/macro'\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "11.1.0"
    },
    "10.0.0-beta.13" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0-beta.13",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0-beta.13.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0-beta.13.tgz",
        "shasum" : "f4ee501cdc02ab05ce8d68eb369200d8ed51420e"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.1",
        "@emotion/memoize" : "0.7.1",
        "@emotion/serialize" : "0.11.0",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "tag" : "next"
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0-beta.13",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0-beta.13_1542717328098_0.07067830158327792"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        // sourceMap is on by default but source maps are dead code eliminated in production\n        \"sourceMap\": true,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\n**.babelrc**\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `true`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n> Note:\n>\n> Source maps are on by default in babel-plugin-emotion but they will be removed in production builds\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config (which is included in Create React App 2.0) and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css/macro'\nimport styled from '@emotion/styled/macro'\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "11.1.0"
    },
    "11.0.0-next.1" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "11.0.0-next.1",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-11.0.0-next.1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-11.0.0-next.1.tgz",
        "shasum" : "f83d0fa5ffdaad41d70fa7b69ba775318bed9dd4"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.3",
        "@emotion/memoize" : "0.7.3",
        "@emotion/serialize" : "^1.0.0-next.0",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell+emotion-release-bot@hamil.town",
        "name" : "emotion-release-bot"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test:typescript" : "exit 0"
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "emotion-release-bot",
        "email" : "mitchell+emotion-release-bot@hamil.town"
      },
      "_id" : "babel-plugin-emotion@11.0.0-next.1",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_11.0.0-next.1_1572985538283_0.9942107584342119"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        // sourceMap is on by default but source maps are dead code eliminated in production\n        \"sourceMap\": true,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\n**.babelrc**\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `true`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n> Note:\n>\n> Source maps are on by default in babel-plugin-emotion but they will be removed in production builds\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n- `[dirname]` - name of the directory containing the file where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config (which is included in Create React App 2.0) and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css/macro'\nimport styled from '@emotion/styled/macro'\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.17.0"
    },
    "11.0.0-next.0" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "11.0.0-next.0",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-11.0.0-next.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-11.0.0-next.0.tgz",
        "shasum" : "93636a71b7d69d29ccc783e68094b15dc5b2fad7"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.3",
        "@emotion/memoize" : "0.7.3",
        "@emotion/serialize" : "^0.11.14",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell+emotion-release-bot@hamil.town",
        "name" : "emotion-release-bot"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "emotion-release-bot",
        "email" : "mitchell+emotion-release-bot@hamil.town"
      },
      "_id" : "babel-plugin-emotion@11.0.0-next.0",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_11.0.0-next.0_1572813326218_0.6182786083654133"
      },
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        // sourceMap is on by default but source maps are dead code eliminated in production\n        \"sourceMap\": true,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\n**.babelrc**\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `true`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n> Note:\n>\n> Source maps are on by default in babel-plugin-emotion but they will be removed in production builds\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n- `[dirname]` - name of the directory containing the file where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config (which is included in Create React App 2.0) and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css/macro'\nimport styled from '@emotion/styled/macro'\n```\n",
      "readmeFilename" : "README.md",
      "_nodeVersion" : "10.17.0"
    },
    "10.0.33" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.33",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.33.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.33.tgz",
        "shasum" : "ce1155dcd1783bbb9286051efee53f4e2be63e03"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.8.0",
        "@emotion/memoize" : "0.7.4",
        "@emotion/serialize" : "^0.11.16",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell+emotion-release-bot@hamil.town",
        "name" : "emotion-release-bot"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "emotion-release-bot",
        "email" : "mitchell+emotion-release-bot@hamil.town"
      },
      "_id" : "babel-plugin-emotion@10.0.33",
      "module" : "dist/babel-plugin-emotion.esm.js",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.33_1585902863066_0.2763552354174057"
      },
      "_nodeVersion" : "10.19.0"
    },
    "11.0.0-next.10" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "11.0.0-next.10",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-11.0.0-next.10.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-11.0.0-next.10.tgz",
        "shasum" : "05ddadeb8b46b3160fa216f7bdea2dffdc7df595"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.7.0",
        "@babel/plugin-syntax-jsx" : "^7.2.0",
        "@babel/runtime" : "^7.7.2",
        "@emotion/hash" : "0.7.3",
        "@emotion/memoize" : "0.7.3",
        "@emotion/serialize" : "^0.12.0-next.3",
        "babel-plugin-macros" : "^2.6.1",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "@babel/core" : "^7.7.2",
        "babel-check-duplicated-nodes" : "^1.0.0"
      },
      "peerDependencies" : {
        "@babel/core" : "^7.0.0"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell+emotion-release-bot@hamil.town",
        "name" : "emotion-release-bot"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test:typescript" : "exit 0"
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "emotion-release-bot",
        "email" : "mitchell+emotion-release-bot@hamil.town"
      },
      "_id" : "babel-plugin-emotion@11.0.0-next.10",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_11.0.0-next.10_1578252132390_0.48872013115523183"
      },
      "readme" : "ERROR: No README data found!",
      "_nodeVersion" : "10.18.0"
    },
    "11.0.0-next.11" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "11.0.0-next.11",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-11.0.0-next.11.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-11.0.0-next.11.tgz",
        "shasum" : "ec96d617de59dfd39e5e8fd2c70cc7f8b6e0b8a6"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.7.0",
        "@babel/plugin-syntax-jsx" : "^7.2.0",
        "@babel/runtime" : "^7.7.2",
        "@emotion/hash" : "0.7.3",
        "@emotion/memoize" : "0.7.3",
        "@emotion/serialize" : "^0.11.15-next.4",
        "babel-plugin-macros" : "^2.6.1",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "@babel/core" : "^7.7.2",
        "babel-check-duplicated-nodes" : "^1.0.0"
      },
      "peerDependencies" : {
        "@babel/core" : "^7.0.0"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell+emotion-release-bot@hamil.town",
        "name" : "emotion-release-bot"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "scripts" : {
        "test:typescript" : "exit 0"
      },
      "_npmVersion" : "6.10.2",
      "_npmUser" : {
        "name" : "emotion-release-bot",
        "email" : "mitchell+emotion-release-bot@hamil.town"
      },
      "_id" : "babel-plugin-emotion@11.0.0-next.11",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_11.0.0-next.11_1579178842168_0.6694447329110242"
      },
      "readme" : "ERROR: No README data found!",
      "_nodeVersion" : "10.18.1"
    },
    "9.0.0-0" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "9.0.0-0",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-9.0.0-0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-9.0.0-0.tgz",
        "shasum" : "94652a610a76884ca6dad43e20410b72ca5362bf"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "7.0.0-beta.32",
        "babel-macros" : "^1.2.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^9.0.0-0",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "@babel/core" : "7.0.0-beta.32",
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@9.0.0-0",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-9.0.0-0.tgz_1514000662107_0.7669959189370275"
      },
      "_nodeVersion" : "8.9.1"
    },
    "9.0.0-1" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "9.0.0-1",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-9.0.0-1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-9.0.0-1.tgz",
        "shasum" : "0d4a012775d2a2b6f4f2122c679c4ab51c27f37b"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "7.0.0-beta.32",
        "babel-macros" : "^1.2.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^9.0.0-0",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "@babel/core" : "7.0.0-beta.32",
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@9.0.0-1",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-9.0.0-1.tgz_1514005006030_0.44662422803230584"
      },
      "_nodeVersion" : "8.9.1"
    },
    "9.0.0-2" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "9.0.0-2",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-9.0.0-2.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-9.0.0-2.tgz",
        "shasum" : "ab14aad0ea06440730ef766b0ead235bd2419b4a"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "7.0.0-beta.32",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^9.0.0-2",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "@babel/core" : "7.0.0-beta.32",
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.5.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@9.0.0-2",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-9.0.0-2.tgz_1516145595823_0.7349022964481264"
      },
      "_nodeVersion" : "8.9.1"
    },
    "9.0.0-3" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "9.0.0-3",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-9.0.0-3.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-9.0.0-3.tgz",
        "shasum" : "4a2293911c79b6cbea1c822e7ce7bb4635bc12d0"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "7.0.0-beta.32",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^9.0.0-3",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "@babel/core" : "7.0.0-beta.32",
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@9.0.0-3",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-9.0.0-3.tgz_1517660365635_0.6338775740005076"
      },
      "_nodeVersion" : "9.4.0"
    },
    "7.1.0" : {
      "name" : "babel-plugin-emotion",
      "description" : "The Next Generation of CSS-in-JS ",
      "version" : "7.1.0",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "git+https://github.com/tkh44/emotion.git"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-7.1.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-7.1.0.tgz",
        "shasum" : "a426861c50f2c42b9d15aef8796da143752a981b"
      },
      "dependencies" : {
        "autoprefixer" : "^7.1.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "emotion-utils" : "^7.1.0",
        "postcss" : "^6.0.9",
        "postcss-js" : "^1.0.0",
        "postcss-nested" : "^2.1.1",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.0.4",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@7.1.0",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-7.1.0.tgz_1503012050553_0.1374696681741625"
      },
      "_nodeVersion" : "7.10.0"
    },
    "7.3.0" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "7.3.0",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-7.3.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-7.3.0.tgz",
        "shasum" : "cf95b3c72907cc9958aa50693dd2155c40d11543"
      },
      "dependencies" : {
        "autoprefixer" : "^7.1.2",
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "emotion-utils" : "^7.2.2",
        "postcss" : "^6.0.9",
        "postcss-js" : "^1.0.0",
        "postcss-nested" : "^2.1.1",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "tkh44",
        "email" : "kye.hohenberger@gmail.com"
      },
      "_id" : "babel-plugin-emotion@7.3.0",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-7.3.0.tgz_1505319308207_0.8630364567507058"
      },
      "_nodeVersion" : "8.4.0"
    },
    "7.3.1" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "7.3.1",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-7.3.1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-7.3.1.tgz",
        "shasum" : "81c5606b437ec5f314268c7ba3c8a430d1ec5844"
      },
      "dependencies" : {
        "autoprefixer" : "^7.1.2",
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "emotion-utils" : "^7.3.1",
        "postcss" : "^6.0.9",
        "postcss-js" : "^1.0.0",
        "postcss-nested" : "^2.1.1",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "tkh44",
        "email" : "kye.hohenberger@gmail.com"
      },
      "_id" : "babel-plugin-emotion@7.3.1",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-7.3.1.tgz_1505321188488_0.239655795507133"
      },
      "_nodeVersion" : "8.4.0"
    },
    "8.0.6" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "8.0.6",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.6.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.6.tgz",
        "shasum" : "f86c6065378defd0f6adaacedab45858b2ca6091"
      },
      "dependencies" : {
        "babel-generator" : "^6.26.0",
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^8.0.6",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.4.2",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@8.0.6",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.6.tgz_1507954383605_0.8537804000079632"
      },
      "_nodeVersion" : "7.10.0"
    },
    "8.0.4" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "8.0.4",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.4.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.4.tgz",
        "shasum" : "e7935423a44a4182137f0e63b89c7bdf0ac80e39"
      },
      "dependencies" : {
        "babel-generator" : "^6.26.0",
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^8.0.2-7",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.4.2",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@8.0.4",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.4.tgz_1507334440651_0.3802975059952587"
      },
      "_nodeVersion" : "7.10.0"
    },
    "8.0.9" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "8.0.9",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.9.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.9.tgz",
        "shasum" : "65a9ead1e9a574fa1b0390ebcea942739761713c"
      },
      "dependencies" : {
        "babel-generator" : "^6.26.0",
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^8.0.9",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@8.0.9",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.9.tgz_1508749636743_0.2931004916317761"
      },
      "_nodeVersion" : "8.5.0"
    },
    "9.2.9" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "9.2.9",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-9.2.9.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-9.2.9.tgz",
        "shasum" : "7b3c72fd6a333127abafe7fb693bcb421e7f5b9f"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/babel-utils" : "^0.6.4",
        "@emotion/hash" : "^0.6.2",
        "@emotion/memoize" : "^0.6.1",
        "@emotion/stylis" : "^0.7.0",
        "babel-core" : "^6.26.3",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "find-root" : "^1.1.0",
        "mkdirp" : "^0.5.1",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@9.2.9",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_9.2.9_1537094708244_0.5255571154738288"
      },
      "_nodeVersion" : "10.10.0"
    },
    "10.0.4" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.4",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.4.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.4.tgz",
        "shasum" : "e9387087728efe25c578b7649e11a2776c97e39c"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.1",
        "@emotion/memoize" : "0.7.1",
        "@emotion/serialize" : "^0.11.2",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.4",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.4_1544045005903_0.6079655366512535"
      },
      "_nodeVersion" : "11.1.0"
    },
    "8.0.2-3" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "8.0.2-3",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.2-3.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.2-3.tgz",
        "shasum" : "4ca0dc33c196d1c6506d2e450a6ee4997dbb06b9"
      },
      "dependencies" : {
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "emotion-utils" : "^8.0.2-3",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.0.4",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@8.0.2-3",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.2-3.tgz_1506045590548_0.4198463037610054"
      },
      "_nodeVersion" : "7.10.0"
    },
    "10.0.3" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.3",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.3.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.3.tgz",
        "shasum" : "548b6e126439cc1b5ead9a4d47f5e78862237f6d"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.1",
        "@emotion/memoize" : "0.7.1",
        "@emotion/serialize" : "^0.11.1",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.3",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.3_1544043929219_0.14594344008883198"
      },
      "_nodeVersion" : "11.1.0"
    },
    "8.0.2-6" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "8.0.2-6",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.2-6.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.2-6.tgz",
        "shasum" : "3d6aa8980ef53c7a0de7ef468e5f31fefd2b4682"
      },
      "dependencies" : {
        "babel-generator" : "^6.26.0",
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^8.0.2-3",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.0.4",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@8.0.2-6",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.2-6.tgz_1506323631938_0.08744290750473738"
      },
      "_nodeVersion" : "7.10.0"
    },
    "10.0.2" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.2",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.2.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.2.tgz",
        "shasum" : "c98e43f9a765931d66ac8ad0849804b6b7e1bd22"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.1",
        "@emotion/memoize" : "0.7.1",
        "@emotion/serialize" : "0.11.0",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.2",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.2_1543877780487_0.44053596663753036"
      },
      "_nodeVersion" : "11.1.0"
    },
    "8.0.2-5" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "8.0.2-5",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.2-5.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.2-5.tgz",
        "shasum" : "49d5d27dcf7cf6b41f426de06dddf6a8dbe45f5f"
      },
      "dependencies" : {
        "babel-generator" : "^6.26.0",
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^8.0.2-3",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.0.4",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@8.0.2-5",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.2-5.tgz_1506219277461_0.06892239721491933"
      },
      "_nodeVersion" : "7.10.0"
    },
    "10.0.0" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0.tgz",
        "shasum" : "ceb177a64d5ccba3c28d7de4a0697d0f3a66315f"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.1",
        "@emotion/memoize" : "0.7.1",
        "@emotion/serialize" : "0.11.0",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0_1543358966256_0.65270021783241"
      },
      "_nodeVersion" : "11.1.0"
    },
    "8.0.2-2" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "8.0.2-2",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.2-2.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.2-2.tgz",
        "shasum" : "50822c933614c27486ce4b6111436f6342b0f0af"
      },
      "dependencies" : {
        "autoprefixer" : "^7.1.2",
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "emotion-utils" : "^8.0.2-2",
        "postcss" : "^6.0.9",
        "postcss-js" : "^1.0.0",
        "postcss-nested" : "^2.1.1",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.0.4",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@8.0.2-2",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.2-2.tgz_1506040436834_0.2619068471249193"
      },
      "_nodeVersion" : "7.10.0"
    },
    "8.0.2-1" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "8.0.2-1",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.2-1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.2-1.tgz",
        "shasum" : "c5b25471b6d550d8315a57ec3a2eedef2125be47"
      },
      "dependencies" : {
        "autoprefixer" : "^7.1.2",
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "emotion-utils" : "^8.0.1-0",
        "postcss" : "^6.0.9",
        "postcss-js" : "^1.0.0",
        "postcss-nested" : "^2.1.1",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.0.4",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@8.0.2-1",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.2-1.tgz_1505960221137_0.870848459424451"
      },
      "_nodeVersion" : "7.10.0"
    },
    "10.0.0-really-unsafe-please-do-not-use.1" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0-really-unsafe-please-do-not-use.1",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0-really-unsafe-please-do-not-use.1.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0-really-unsafe-please-do-not-use.1.tgz",
        "shasum" : "95c313bdf73dc5f5c2c44d541178bdcdb6f305ed"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/css" : "^10.0.0-really-unsafe-please-do-not-use.1",
        "@emotion/hash" : "^10.0.0-really-unsafe-please-do-not-use.1",
        "@emotion/memoize" : "^10.0.0-really-unsafe-please-do-not-use.1",
        "@emotion/serialize" : "^10.0.0-really-unsafe-please-do-not-use.1",
        "@emotion/stylis" : "^10.0.0-really-unsafe-please-do-not-use.1",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "tag" : "next"
      },
      "_from" : "file:babel-plugin-emotion-10.0.0-really-unsafe-please-do-not-use.1.tgz",
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0-really-unsafe-please-do-not-use.1",
      "gitHead" : "2b1bf6ef43eaa9133ba7a9d7c8d96ebc1d3877e2",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0-really-unsafe-please-do-not-use.1_1538108328167_0.8107505710772132"
      },
      "_resolved" : "",
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        \"sourceMap\": false,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\nUse [Babel's `env` property](https://babeljs.io/docs/usage/babelrc/#env-option)\n\n**.babelrc**\n\n```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [[\"emotion\", { \"hoist\": true }]]\n    },\n    \"development\": {\n      \"plugins\": [[\"emotion\", { \"sourceMap\": true, \"autoLabel\": true }]]\n    }\n  }\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `false`.\n\nThis option enables the following:\n\n* Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n* Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n* Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n* `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n* `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css.macro'\nimport styled from '@emotion/styled.macro'\n```\n\n[create-react-app issue discussing macros](https://github.com/facebookincubator/create-react-app/issues/2730).\n",
      "readmeFilename" : "README.md",
      "_integrity" : "",
      "_nodeVersion" : "10.11.0"
    },
    "10.0.0-really-unsafe-please-do-not-use.2" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0-really-unsafe-please-do-not-use.2",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0-really-unsafe-please-do-not-use.2.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0-really-unsafe-please-do-not-use.2.tgz",
        "shasum" : "7479dcc73b33ceb6b49857360ae7891298b0a157"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/css" : "^10.0.0-really-unsafe-please-do-not-use.2",
        "@emotion/hash" : "^10.0.0-really-unsafe-please-do-not-use.2",
        "@emotion/memoize" : "^10.0.0-really-unsafe-please-do-not-use.2",
        "@emotion/serialize" : "^10.0.0-really-unsafe-please-do-not-use.2",
        "@emotion/stylis" : "^10.0.0-really-unsafe-please-do-not-use.2",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "tag" : "next"
      },
      "_from" : "file:babel-plugin-emotion-10.0.0-really-unsafe-please-do-not-use.2.tgz",
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0-really-unsafe-please-do-not-use.2",
      "gitHead" : "0da0de50f6f2c19e46bca7662d1a954d48db1264",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0-really-unsafe-please-do-not-use.2_1538109458937_0.5743208230991574"
      },
      "_resolved" : "",
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        \"sourceMap\": false,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\nUse [Babel's `env` property](https://babeljs.io/docs/usage/babelrc/#env-option)\n\n**.babelrc**\n\n```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [[\"emotion\", { \"hoist\": true }]]\n    },\n    \"development\": {\n      \"plugins\": [[\"emotion\", { \"sourceMap\": true, \"autoLabel\": true }]]\n    }\n  }\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `false`.\n\nThis option enables the following:\n\n* Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n* Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n* Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n* `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n* `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css.macro'\nimport styled from '@emotion/styled.macro'\n```\n\n[create-react-app issue discussing macros](https://github.com/facebookincubator/create-react-app/issues/2730).\n",
      "readmeFilename" : "README.md",
      "_integrity" : "",
      "_nodeVersion" : "10.11.0"
    },
    "9.2.4" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "9.2.4",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh/",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-9.2.4.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-9.2.4.tgz",
        "shasum" : "a4e54a8097f6ba06cbbc7a9063927afafe9fe73a"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "7.0.0-beta.40",
        "@emotion/babel-utils" : "^0.6.4",
        "@emotion/hash" : "^0.6.2",
        "@emotion/memoize" : "^0.6.1",
        "@emotion/stylis" : "^0.6.10",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "find-root" : "^1.1.0",
        "mkdirp" : "^0.5.1",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "@babel/core" : "7.0.0-beta.40",
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@9.2.4",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_9.2.4_1529614510846_0.02383907336040969"
      }
    },
    "10.0.0-really-unsafe-please-do-not-use.0" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.0-really-unsafe-please-do-not-use.0",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.0-really-unsafe-please-do-not-use.0.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.0-really-unsafe-please-do-not-use.0.tgz",
        "shasum" : "8a3e3afa337ec4810488f8d519eb4978cfd13eb0"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/css" : "^10.0.0-really-unsafe-please-do-not-use.0",
        "@emotion/hash" : "^10.0.0-really-unsafe-please-do-not-use.0",
        "@emotion/memoize" : "^10.0.0-really-unsafe-please-do-not-use.0",
        "@emotion/serialize" : "^10.0.0-really-unsafe-please-do-not-use.0",
        "@emotion/stylis" : "^10.0.0-really-unsafe-please-do-not-use.0",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "publishConfig" : {
        "tag" : "next"
      },
      "_from" : "file:babel-plugin-emotion-10.0.0-really-unsafe-please-do-not-use.0.tgz",
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.0-really-unsafe-please-do-not-use.0",
      "gitHead" : "a5f3825603dffd69fddb44bf5f29afd7c49eabd5",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.0-really-unsafe-please-do-not-use.0_1538091285140_0.3115601414846523"
      },
      "_resolved" : "",
      "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        \"sourceMap\": false,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\nUse [Babel's `env` property](https://babeljs.io/docs/usage/babelrc/#env-option)\n\n**.babelrc**\n\n```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [[\"emotion\", { \"hoist\": true }]]\n    },\n    \"development\": {\n      \"plugins\": [[\"emotion\", { \"sourceMap\": true, \"autoLabel\": true }]]\n    }\n  }\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `false`.\n\nThis option enables the following:\n\n* Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n* Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n* Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n* `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n* `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css.macro'\nimport styled from '@emotion/styled.macro'\n```\n\n[create-react-app issue discussing macros](https://github.com/facebookincubator/create-react-app/issues/2730).\n",
      "readmeFilename" : "README.md",
      "_integrity" : "",
      "_nodeVersion" : "10.11.0"
    },
    "10.0.9" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.9",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.9.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.9.tgz",
        "shasum" : "04a0404d5a4084d5296357a393d344c0f8303ae4"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.1",
        "@emotion/memoize" : "0.7.1",
        "@emotion/serialize" : "^0.11.6",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.5.0",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.9",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.9_1552285942934_0.3483560618438286"
      },
      "_nodeVersion" : "11.7.0"
    },
    "9.2.5" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "9.2.5",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh/",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-9.2.5.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-9.2.5.tgz",
        "shasum" : "0046e03be5c16276f85380476f88c9fcbf7c9536"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "7.0.0-beta.51",
        "@emotion/babel-utils" : "^0.6.4",
        "@emotion/hash" : "^0.6.2",
        "@emotion/memoize" : "^0.6.1",
        "@emotion/stylis" : "^0.6.10",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "find-root" : "^1.1.0",
        "mkdirp" : "^0.5.1",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib", "dist" ],
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@9.2.5",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_9.2.5_1530918170093_0.8519479375836134"
      }
    },
    "10.0.8" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.8",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.8.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.8.tgz",
        "shasum" : "2c83ab21bb2fe1c5f824fa144714cb0d54605c3d"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.1",
        "@emotion/memoize" : "0.7.1",
        "@emotion/serialize" : "^0.11.5",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.5.0",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.8",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.8_1552285467759_0.6786365389499538"
      },
      "_nodeVersion" : "11.7.0"
    },
    "8.0.2-7" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, the The Next Generation of CSS-in-JS.",
      "version" : "8.0.2-7",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://github.com/tkh44/emotion#readme",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/tkh44/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/tkh44/emotion/issues"
      },
      "main" : "lib/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-8.0.2-7.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-8.0.2-7.tgz",
        "shasum" : "5b7fce1fe665b5d8aad1fae778be847a926a815c"
      },
      "dependencies" : {
        "babel-generator" : "^6.26.0",
        "babel-macros" : "^1.0.2",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "emotion-utils" : "^8.0.2-7",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-cli" : "^6.24.1",
        "npm-run-all" : "^4.0.2",
        "rimraf" : "^2.6.1"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib" ],
      "maintainers" : [ {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      }, {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      } ],
      "directories" : {
      },
      "scripts" : {
        "build" : "npm-run-all clean babel",
        "babel" : "babel src -d lib",
        "watch" : "babel src -d lib --watch",
        "clean" : "rimraf lib"
      },
      "_npmVersion" : "5.3.0",
      "_npmUser" : {
        "name" : "tkh44",
        "email" : "kye.hohenberger@gmail.com"
      },
      "_id" : "babel-plugin-emotion@8.0.2-7",
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion-8.0.2-7.tgz_1506394868101_0.7039199899882078"
      },
      "_nodeVersion" : "8.1.2"
    },
    "9.2.6" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "9.2.6",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-9.2.6.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-9.2.6.tgz",
        "shasum" : "992d48f316c20610c28a95ae90e6bd193014eec5"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "7.0.0-beta.51",
        "@emotion/babel-utils" : "^0.6.4",
        "@emotion/hash" : "^0.6.2",
        "@emotion/memoize" : "^0.6.1",
        "@emotion/stylis" : "^0.6.10",
        "babel-core" : "^6.26.3",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "find-root" : "^1.1.0",
        "mkdirp" : "^0.5.1",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib", "dist" ],
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "5.6.0",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@9.2.6",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_9.2.6_1531627718683_0.9237517218751627"
      },
      "_nodeVersion" : "9.6.1"
    },
    "10.0.7" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.7",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.7.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.7.tgz",
        "shasum" : "3634ada6dee762140f27db07387feaec8d2cb619"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.1",
        "@emotion/memoize" : "0.7.1",
        "@emotion/serialize" : "^0.11.4",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.5.0",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.7",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.7_1549263866354_0.7472267464510156"
      },
      "_nodeVersion" : "11.7.0"
    },
    "10.0.6" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.6",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.6.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.6.tgz",
        "shasum" : "fd9bb4a5dc6cf2289b656215dbbc80469fd251b3"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.1",
        "@emotion/memoize" : "0.7.1",
        "@emotion/serialize" : "^0.11.3",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.5.0",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.6",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.6_1546816582761_0.004920746856460934"
      },
      "_nodeVersion" : "11.1.0"
    },
    "9.2.8" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "9.2.8",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/index.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-9.2.8.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-9.2.8.tgz",
        "shasum" : "4df55ef10625c391f25b031f7e3006abac359e09"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "7.0.0-beta.51",
        "@emotion/babel-utils" : "^0.6.4",
        "@emotion/hash" : "^0.6.2",
        "@emotion/memoize" : "^0.6.1",
        "@emotion/stylis" : "^0.7.0",
        "babel-core" : "^6.26.3",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "find-root" : "^1.1.0",
        "mkdirp" : "^0.5.1",
        "source-map" : "^0.5.7",
        "touch" : "^1.0.0"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "files" : [ "src", "lib", "dist" ],
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.3.0",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@9.2.8",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_9.2.8_1535454011792_0.7045853083935807"
      },
      "_nodeVersion" : "9.6.1"
    },
    "10.0.5" : {
      "name" : "babel-plugin-emotion",
      "description" : "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
      "version" : "10.0.5",
      "author" : {
        "name" : "Kye Hohenberger"
      },
      "homepage" : "https://emotion.sh",
      "repository" : {
        "type" : "git",
        "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
      },
      "bugs" : {
        "url" : "https://github.com/emotion-js/emotion/issues"
      },
      "main" : "dist/babel-plugin-emotion.cjs.js",
      "dist" : {
        "tarball" : "https://na.artifactory.swg-devops.com:443/artifactory/api/npm/fxo-cio-ies-npm-virtual/babel-plugin-emotion/-/babel-plugin-emotion-10.0.5.tgz?dl=https%3A%2F%2Fregistry.npmjs.org%2Fbabel-plugin-emotion%2F-%2Fbabel-plugin-emotion-10.0.5.tgz",
        "shasum" : "05ec47cde94f984b0b2aebdd41f81876cf9cbb24"
      },
      "dependencies" : {
        "@babel/helper-module-imports" : "^7.0.0",
        "@emotion/hash" : "0.7.1",
        "@emotion/memoize" : "0.7.1",
        "@emotion/serialize" : "^0.11.3",
        "babel-plugin-macros" : "^2.0.0",
        "babel-plugin-syntax-jsx" : "^6.18.0",
        "convert-source-map" : "^1.5.0",
        "escape-string-regexp" : "^1.0.5",
        "find-root" : "^1.1.0",
        "source-map" : "^0.5.7"
      },
      "devDependencies" : {
        "babel-check-duplicated-nodes" : "^1.0.0",
        "babel-core" : "^6.26.3"
      },
      "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
      "license" : "MIT",
      "maintainers" : [ {
        "email" : "mitchell@mitchellhamilton.me",
        "name" : "mitchellhamilton"
      }, {
        "email" : "kye.hohenberger@gmail.com",
        "name" : "tkh44"
      } ],
      "directories" : {
      },
      "_npmVersion" : "6.4.1",
      "_npmUser" : {
        "name" : "mitchellhamilton",
        "email" : "mitchell@mitchellhamilton.me"
      },
      "_id" : "babel-plugin-emotion@10.0.5",
      "_hasShrinkwrap" : false,
      "_npmOperationalInternal" : {
        "host" : "s3://npm-registry-packages",
        "tmp" : "tmp/babel-plugin-emotion_10.0.5_1544748563428_0.45761885859899665"
      },
      "_nodeVersion" : "11.1.0"
    }
  },
  "readme" : "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```js\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        // sourceMap is on by default but source maps are dead code eliminated in production\n        \"sourceMap\": true,\n        \"autoLabel\": process.env.NODE_ENV !== 'production',\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\n**.babelrc**\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `sourceMap`\n\n`boolean`, defaults to `true`.\n\nThis option enables the following:\n\n- Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n> Note:\n>\n> Source maps are on by default in babel-plugin-emotion but they will be removed in production builds\n\n### `autoLabel`\n\n`boolean`, defaults to `process.env.NODE_ENV !== 'production'`.\n\nThis option enables the following:\n\n- Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n- Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n- `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n- `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n- `[dirname]` - name of the directory containing the file where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that the `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: '[filename]--[local]'\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-hash-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n**Out**\n\n```javascript\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n`H1`'s class name attribute would be `css-hash-H1`\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `cssPropOptimization`\n\n`boolean`, defaults to `true`.\n\nThis option assumes that you are using something to make `@emotion/core`'s `jsx` function work for all jsx. If you are not doing so and you do not want such optimizations to occur, disable this option.\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config (which is included in Create React App 2.0) and use the imports/packages shown below.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\nimport css from '@emotion/css/macro'\nimport styled from '@emotion/styled/macro'\n```\n",
  "maintainers" : [ {
    "email" : "mitchell+emotion-release-bot@hamil.town",
    "name" : "emotion-release-bot"
  }, {
    "email" : "mitchell@mitchellhamilton.me",
    "name" : "mitchellhamilton"
  }, {
    "email" : "kye.hohenberger@gmail.com",
    "name" : "tkh44"
  } ],
  "author" : {
    "name" : "Kye Hohenberger"
  },
  "time" : {
    "9.0.0" : "2018-02-04T04:53:37.410Z",
    "9.0.1" : "2018-02-13T11:10:27.606Z",
    "9.2.0" : "2018-06-07T10:01:40.276Z",
    "10.0.14" : "2019-06-25T23:08:15.846Z",
    "10.0.15" : "2019-08-02T23:30:10.526Z",
    "10.0.16" : "2019-08-16T02:20:25.058Z",
    "10.0.17" : "2019-08-31T23:52:25.620Z",
    "10.0.19" : "2019-09-17T12:51:18.492Z",
    "9.2.11" : "2018-09-30T21:45:10.528Z",
    "9.2.10" : "2018-09-19T20:45:09.136Z",
    "8.0.2" : "2017-10-05T17:35:00.178Z",
    "8.0.3" : "2017-10-06T22:23:46.962Z",
    "10.0.13" : "2019-06-09T09:16:11.448Z",
    "10.0.0-beta.9" : "2018-11-12T04:59:46.847Z",
    "modified" : "2020-04-03T08:34:25.831Z",
    "10.0.0-beta.8" : "2018-11-05T04:46:34.434Z",
    "7.3.2" : "2017-09-14T12:30:25.010Z",
    "10.0.0-beta.5" : "2018-10-17T07:34:26.295Z",
    "10.0.0-beta.4" : "2018-10-17T07:25:22.625Z",
    "10.0.0-beta.7" : "2018-11-02T07:30:37.224Z",
    "10.0.0-beta.6" : "2018-10-27T05:21:07.973Z",
    "10.0.0-beta.1" : "2018-10-15T10:26:57.658Z",
    "10.0.0-beta.0" : "2018-10-13T07:35:16.831Z",
    "10.0.0-beta.3" : "2018-10-16T23:58:26.609Z",
    "7.2.2" : "2017-09-05T16:47:17.351Z",
    "10.0.0-beta.2" : "2018-10-16T08:33:50.055Z",
    "created" : "2017-08-17T23:20:50.915Z",
    "8.0.2-10" : "2017-09-29T18:41:53.465Z",
    "8.0.2-11" : "2017-09-30T05:12:22.012Z",
    "11.0.0-next.4" : "2019-11-13T10:42:55.343Z",
    "11.0.0-next.3" : "2019-11-09T10:20:39.979Z",
    "10.0.27" : "2019-12-22T23:11:18.143Z",
    "10.0.28" : "2020-02-27T17:45:49.291Z",
    "10.0.29" : "2020-03-02T10:15:54.892Z",
    "11.0.0-next.8" : "2019-12-07T21:16:08.546Z",
    "11.0.0-next.6" : "2019-11-25T22:44:30.837Z",
    "10.0.20" : "2019-10-02T22:56:05.527Z",
    "10.0.21" : "2019-10-05T22:34:50.297Z",
    "8.0.1-0" : "2017-09-20T22:31:48.109Z",
    "10.0.22" : "2019-10-23T12:22:40.741Z",
    "10.0.23" : "2019-10-29T11:45:22.148Z",
    "9.1.2" : "2018-04-17T07:45:31.972Z",
    "8.0.11" : "2017-11-24T10:45:14.705Z",
    "8.0.12" : "2017-11-30T23:30:00.634Z",
    "8.0.10" : "2017-11-07T21:30:49.538Z",
    "9.1.0" : "2018-03-23T21:03:22.148Z",
    "8.0.0-0" : "2017-09-20T02:37:34.354Z",
    "10.0.0-beta.10" : "2018-11-12T05:17:01.846Z",
    "10.0.0-beta.12" : "2018-11-13T05:12:00.231Z",
    "10.0.0-beta.11" : "2018-11-12T07:23:33.808Z",
    "10.0.0-beta.13" : "2018-11-20T12:35:28.269Z",
    "11.0.0-next.1" : "2019-11-05T20:25:38.537Z",
    "11.0.0-next.0" : "2019-11-03T20:35:26.405Z",
    "10.0.33" : "2020-04-03T08:34:23.201Z",
    "11.0.0-next.10" : "2020-01-05T19:22:12.553Z",
    "11.0.0-next.11" : "2020-01-16T12:47:22.326Z",
    "9.0.0-0" : "2017-12-23T03:44:22.216Z",
    "9.0.0-1" : "2017-12-23T04:56:46.457Z",
    "9.0.0-2" : "2018-01-16T23:33:16.491Z",
    "9.0.0-3" : "2018-02-03T12:19:25.860Z",
    "7.1.0" : "2017-08-17T23:20:50.915Z",
    "7.3.0" : "2017-09-13T16:15:10.523Z",
    "7.3.1" : "2017-09-13T16:46:29.543Z",
    "8.0.6" : "2017-10-14T04:13:03.735Z",
    "8.0.4" : "2017-10-07T00:00:40.717Z",
    "8.0.9" : "2017-10-23T09:07:17.110Z",
    "9.2.9" : "2018-09-16T10:45:08.361Z",
    "10.0.4" : "2018-12-05T21:23:26.087Z",
    "8.0.2-3" : "2017-09-22T01:59:50.679Z",
    "10.0.3" : "2018-12-05T21:05:29.358Z",
    "8.0.2-6" : "2017-09-25T07:13:52.031Z",
    "10.0.2" : "2018-12-03T22:56:20.635Z",
    "8.0.2-5" : "2017-09-24T02:14:37.569Z",
    "10.0.0" : "2018-11-27T22:49:26.372Z",
    "8.0.2-2" : "2017-09-22T00:33:56.950Z",
    "8.0.2-1" : "2017-09-21T02:17:01.540Z",
    "10.0.0-really-unsafe-please-do-not-use.1" : "2018-09-28T04:18:48.246Z",
    "10.0.0-really-unsafe-please-do-not-use.2" : "2018-09-28T04:37:39.078Z",
    "9.2.4" : "2018-06-21T20:55:10.979Z",
    "10.0.0-really-unsafe-please-do-not-use.0" : "2018-09-27T23:34:45.243Z",
    "10.0.9" : "2019-03-11T06:32:23.121Z",
    "9.2.5" : "2018-07-06T23:02:50.143Z",
    "10.0.8" : "2019-03-11T06:24:27.925Z",
    "8.0.2-7" : "2017-09-26T03:01:09.936Z",
    "9.2.6" : "2018-07-15T04:08:38.797Z",
    "10.0.7" : "2019-02-04T07:04:26.464Z",
    "10.0.6" : "2019-01-06T23:16:22.911Z",
    "9.2.8" : "2018-08-28T11:00:11.907Z",
    "10.0.5" : "2018-12-14T00:49:23.585Z"
  },
  "repository" : {
    "type" : "git",
    "url" : "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
  },
  "users" : {
    "qddegtya" : true,
    "arcticicestudio" : true,
    "gamersdelight" : true
  },
  "readmeFilename" : "README.md",
  "homepage" : "https://emotion.sh",
  "keywords" : [ "styles", "emotion", "react", "css", "css-in-js" ],
  "bugs" : {
    "url" : "https://github.com/emotion-js/emotion/issues"
  },
  "license" : "MIT"
}